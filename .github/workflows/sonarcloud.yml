name: SonarCloud Code Analysis

on:
  push:
    branches:
      - main
    paths:
      - "src/**"
      - "tests/**"
      - "other-services/**/*.cs"
      - "**/*.csproj"
      - "Directory.*.props"
  pull_request:
    types: [opened, synchronize, reopened]
    paths:
      - "src/**"
      - "tests/**"
      - "other-services/**/*.cs"
      - "**/*.csproj"
      - "Directory.*.props"

jobs:
  sonarcloud:
    name: SonarCloud Analysis
    runs-on: windows-latest

    permissions:
      contents: read
      pull-requests: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Shallow clones should be disabled for better analysis

      - name: Set up .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: "9.x"

      - name: Cache SonarCloud packages
        uses: actions/cache@v4
        with:
          path: ~\.sonar\cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Cache NuGet packages
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json', 'Directory.Packages.props') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Install SonarCloud Scanner for .NET
        run: |
          dotnet tool install --global dotnet-sonarscanner

      - name: Install Coverage Tool
        run: |
          dotnet tool install --global dotnet-coverage

      - name: Restore dependencies
        run: dotnet restore

      - name: Begin SonarCloud Analysis
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          dotnet sonarscanner begin `
            /k:"omerkocadere_OmCleanArch" `
            /o:"omerkocadere" `
            /n:"OmCleanArch" `
            /v:"1.0" `
            /d:sonar.host.url="https://sonarcloud.io" `
            /d:sonar.token="$env:SONAR_TOKEN" `
            /d:sonar.projectBaseDir="$env:GITHUB_WORKSPACE" `
            /d:sonar.sources="src/,other-services/" `
            /d:sonar.tests="tests/" `
            /d:sonar.exclusions="**/client/**,**/node_modules/**,**/bin/**,**/obj/**,**/wwwroot/**,**/*.js,**/*.css,**/*.html,**/seq-data/**,**/Migrations/**,**/keys/**" `
            /d:sonar.test.exclusions="**/tests/**,**/*Tests.cs" `
            /d:sonar.coverage.exclusions="**/tests/**,**/Migrations/**,**/*Tests.cs,**/Program.cs" `
            /d:sonar.cs.vscoveragexml.reportsPaths="coverage.xml" `
            /d:sonar.sourceEncoding="UTF-8"

      - name: Build solution
        run: dotnet build --configuration Release --no-restore

      - name: Run tests with coverage
        run: |
          dotnet-coverage collect "dotnet test --configuration Release --no-build --verbosity normal" -f xml -o "coverage.xml"

      - name: End SonarCloud Analysis
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          dotnet sonarscanner end /d:sonar.token="$env:SONAR_TOKEN"

      - name: SonarCloud Quality Gate Check
        uses: SonarSource/sonarqube-quality-gate-action@master
        timeout-minutes: 5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        continue-on-error: true
